const input = `###..#####..#....##.#..#...#.#.#..#.##..##...#.#.###.#.###...###.#....
#..#..#.#....#.#.####.#.#.....#..####...####.##.#.#....####...#..#.#..
...##...#.#####..###......#.#.#..##.#..#..#####.#..###.#.####.#.####..
#.#...#...#.#..##.#.#..#.####...#.#####.###.##....##.###.#.##..####.#.
...##.##..#.##.###..##.####.##.#...##...#.#...#.##.#..##...###.###....
.......#.#..#.#....#....#.....##...#.#...###..#..#.##...#....##...#..#
#.##..#.#..#.#####.#.#....##..#..##..###...#.###.####.#.....#..#.#.##.
.#####.......###.##.#....#...##.#.#...#.######...##.#.#.###...###..#..
.#.###..#####.##.##...#..##..#.#..#.####.##..###.##..##..##..##..##.#.
..##..###.###.....#...###.#.#...#####.##..######.#.#.#...#..####....#.
.#.....#..#........#####.###.##..#.####..#.#.#.###.###.#.....###.....#
.#.##....#..#..#..#..#.#.#.....###.##.####.###.#..#..###..##.......###
##.##..###...##....#....#........#.#######....#..#.##..#.##...#.#####.
.#####.#.#.######.##....#..###.##......####..#...#.##.######...####.##
#..###..#...##.##..#.#.....##...#.##.#.####.###.##....#.###.###...#.##
..##.#...###...#...###.#.#.###.#.####..##..#...#..##...#..####...#.###
###.....#..#....#.#......###..##.#...####...#..########..#.##.....####
###..##....#.......#..###.#.#..##..#...###.......###....###.##..#..##.
#..#.#..#.###....#.##.#.....#.##.##..#.##.###..##..###.##.###..#.##...
#..#....#..##......###.######..#..#####.##...#.#..#..##..#.#....####.#
.....#...#..####..##..#.#.##..##.###..#.###..#....##.##.##.####.......
...#..#.####....###.#......#..###.##.#.#..##.#..#####.###..###..##.###
#.###...#.#####..##.##..#.#....###.####.##.....####..#...#.###.#####..
..#####.#...#.#..#..#.#.#.#.#......#.##.#.....##....#.##..###..####..#
...#####.#.#..#..###..##.#.##.##...#.##.#.##.#.#.....#.###..####.#.#..
####....##.##....#.#.###.##..#.#......#....#.###..#.#######.#..##...#.
#.#..#..####..#.#...##.#...###.....##.###...#.#.#####.#....###.###.##.
#.####.....#........##.#..##..##.###.#.##.#.#.#...##..#########.###..#
#.#.#..#########.###.##..###.#...#.##.#..#....###...###.#..##.##.##...
.#.#..##.......###.##.#.##......###..#....###.#...###.#.....#.#####...
##.##..#.#..#....####.##..######.#.#..##...#...##.#.##..#.#....#.#.#.#
.#..#...#.###....#..#.#.#...#####...#.#####.#.....#.#.##.#...##..##.##
.##.#.######.#.####.#..##.#.####.##.##..##.######..#.#######..#.#..##.
.#....#.#.###.##.....#..##.#.#####..##..###.##.#...#.#.#....#....###.#
.#.#.#..#.....##.#....##.#....###.###......#.#..#.#...##...#..#.###..#
..#..#....##.##...#.#...#......#.#####....###.#..#.#..#..#.####..#####
.#.#..#....####..#....##..####.#.#.#...#.##.#..........###.....#..#..#
.#.##.#.#.....##.#...###.....#####.##.##......###.#.##..####.##....#..
...#..##.#..#....#.....##..#.#.##.###.##.#.#..##.#.#...##.#...####...#
##.#.########....#.#..##..#.##...###..#...#.##.###..####.###.......#.#
#.##...##..#####..##..###.#..######..###..######..#.#.#..########.#...
##..##..##.##.##...###..#.#.#..#.#.###.#..#...#..#.#....#..##....#..#.
..#####..#.#.##.##.####.#..#.####.#.#.....#....#.##...##.....###....##
##..####..#.###.##..######.#..#.##.##..####..#.##.#.##.#.#.###.#.##...
#.#...#..##.##...##....#..#..#.#.#####....#.#.#.###..#..#.#..#....#...
#.###....##.........###...###..##.#..#.##.#.....#..#.######..#.###....
#######..###.#..###...#..#####.....#..#...#..##..#....#.#####..###....
.#...###..###....##.##.....#.##.#.###.#.####...#...#.#.##........#.#.#
##..#..#......#.#.###.#.#.#.#....#.#...####.###.##.#.#..###........##.
.#..#..#.#.###..#...#..###.##....#........#.#.#.####.#..#.#.####..#.##
..########..#..#..#.####.####.###.#####..#..######..#.#.#....#......#.
###.##..##.####.#.......###.....####.#.#..#.#.#..#.#..##.###...#.##.##
.....##..#..#.#.#.####...##..######.#.####..#..##.###......###.#....#.
#..###...#..##........#.#.###.##.##..#..#..##.##.#.#..##.#..##.##...#.
..#....#.#.#####.##...#.##.#..##....##.##.#....##..#.######..#.####.#.
#...##.#.##.#.#...#.###.#.#.##.....##.###.#...#.#.#####.######.##.#.##
#.#.###..#.#..####..###..#####.#.........#..####.##.###.###.#....#....
.#.#...#.#.###..##....#..#.###.#...#.#..###..###..#.##.#.##.#.#...##..
...##..#.#.#.###..##...#####..##.#.#.####.#...####.#.#..#..##...##.###
...####..###.###.#.#...#.##...#.###...#.#.#.#.#.....#..#...##..##.#...
##..###...##.#.###.##.##..#.#####.###.......##.####..##.....#.#.##..#.
......##.....#...#.###.##.#..#####.#.###....#.#..###.#....##...##.#.##
...#.#.###.##...##.####..##.##..#...#.#.......##..#..#....##...#.#.#..
..##.....###.....#...#.#.##..###..####.###..###...#..#...#..###...##..
.#.#.#.#..####..#...###.#.#..##.##.#.#..#..##.......#.#..#.####.###.##
#..###..###.#.......#.#...##.###.#....#..#.##.#.##.##.####.####.#####.
###.#...#....#.#..##.#.##.##.#.#..##..##..#####.#.#.#.##.....##.##..##
##.##..#....##...###.##..#...#.....#.#..##......#...#.###....#.#..#..#
##..#..###..####.#.#.#.##.#.###.###.##.#.##....##.#.#..#.#..#.#...###.
#.##..##.#.###..#.#.####.#...#...##..#..##.###.#.#.......#....##.##...`;

const sample = `..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............`;

let map = input.split("\n");
let h = map.length;
let w = map[0].length;
let elves = [];

for (let i = 0; i < map.length; i++){
    let line = map[i];
    for (let j = 0; j < line.length; j++){
        if (line[j] === "#"){
            elves.push({ r: i, c: j });
        }
    }
}

function generateMap(){
    map = [];
    for (let i = 0; i < h; i++){
        map.push([]);
        for (let j = 0; j < w; j++){
            map[i][j] = ".";
        }
    }
    
    // place elves
    for (let e = 0; e < elves.length; e++){
        let elf = elves[e];
        map[elf.r][elf.c] = "#";
    }
}

generateMap()

function isEmpty(r, c){
    if (r < 0 || c < 0 || r >= h){
        return true;
    }
    if (c >= w){
        return true;
    }
    return map[r][c] === ".";
}

function getKey(elf){
    switch(elf.dir){
        case 'N':
            return `r${(elf.r - 1)}-c${elf.c}`
        case 'S':
            return `r${(elf.r + 1)}-c${elf.c}`
        case 'E':
            return `r${(elf.r)}-c${elf.c + 1}`
        case 'W':
            return `r${(elf.r)}-c${elf.c - 1}`
    }
}

let mapXOffset = 0;
let mapYOffset = 0;
let order = ['N', 'S', 'W', 'E'];
const roundCount = 10;

for (let round = 0; round < roundCount; round++){
    let proposals = {};
    
    for (let e = 0; e < elves.length; e++){
        let elf = elves[e];
        const nw = isEmpty(elf.r - 1, elf.c - 1)
        const n = isEmpty(elf.r - 1, elf.c)
        const ne = isEmpty(elf.r - 1, elf.c + 1)
        const w = isEmpty(elf.r, elf.c - 1)
        const east = isEmpty(elf.r, elf.c + 1)
        const sw = isEmpty(elf.r + 1, elf.c - 1)
        const s = isEmpty(elf.r + 1, elf.c)
        const se = isEmpty(elf.r + 1, elf.c + 1)   
        elf.move = 0;
        if ( nw && n && ne && east && w && se && s && sw){
            continue; // elf wont move
        }
        // propose movements
        for (let i = 0; i < order.length && !elf.move; i++){
            switch (order[i]){
                case "N":
                    if (nw && n && ne){
                        elf.move = 1;
                        elf.dir = order[i];
                    }
                    break;
                case "E":
                    if (ne && east && se){
                        elf.move = 1;
                        elf.dir = order[i];
                    }
                    break;
                case "W":
                    if (nw && w && sw){
                        elf.move = 1;
                        elf.dir = order[i];
                    }
                    break;
                case "S":
                    if (sw && s && se){
                        elf.move = 1;
                        elf.dir = order[i];
                    }
                    break;
            }
        }
        if (elf.move){
            const key = getKey(elf)
            if (!proposals[key])
                proposals[key] = 1
            else
                proposals[key]++;
        }
    }

    // phase 2: move
    for (let e = 0; e < elves.length; e++){
        let elf = elves[e];
        let key = getKey(elf);
        if (elf.move){
            if (proposals[key] === 1){
                switch (elf.dir){
                    case 'N':
                        elf.r--;
                        break;
                    case 'S':
                        elf.r++;
                        break;
                    case 'W':
                        elf.c--;
                        break;
                    case 'E':
                        elf.c++;
                        break;                
                }
            }    
        }
    }

    let rowbefore = false;
    let rowafter = false;
    let columnbefore = false;
    let columnafter = false;
    for (let e = 0; e < elves.length; e++){
        let elf = elves[e];
        if (elf.r < 0){
            rowbefore = true;
        }
        if (elf.c < 0){
            columnbefore = true;
        }
        if (elf.r >= h){
            rowafter = true;
        }
        if (elf.c >= w){
            columnafter = true;
        }   
    }

    if (rowbefore){
        h++;
        for (let e = 0; e < elves.length; e++){
            elves[e].r++;
        }
    }
    if (rowafter){
        h++;
    }
    if (columnbefore){
        w++;
        for (let e = 0; e < elves.length; e++){
            elves[e].c++;
        }
    }
    if (columnafter){
        w++;
    }
    
    // generate map again
    generateMap();

    // change proposal order
    order.push(order.shift());   
    
}

let rmin = Infinity;
let rmax = -Infinity;
let cmin = Infinity;
let cmax = -Infinity;

for (let e = 0; e < elves.length; e++){
    let elf = elves[e];
    rmin = Math.min(rmin, elf.r);
    rmax = Math.max(rmax, elf.r);
    cmin = Math.min(cmin, elf.c);
    cmax = Math.max(cmax, elf.c);
}
console.log(map.map((l) => l.join("")).join("\n"))
console.log(order);

w = rmax - rmin + 1;
h = cmax - cmin + 1;

console.log( w * h - elves.length)